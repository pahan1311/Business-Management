import React, { useState, useEffect } from 'react';
import { orderAPI, customerAPI, userAPI, deliveryAPI } from '../../../services/api';
import { useCrud } from '../../../hooks/useApi';
import Button from '../../common/Button';
import StatusBadge from '../../common/StatusBadge';
import LoadingSpinner from '../../common/LoadingSpinner';
import { formatDate, formatCurrency, getStatusBadgeColor } from '../../../utils/helpers';
import { ORDER_STATUS } from '../../../utils/constants';
import OrderDetail from './OrderDetail';
import { Modal, Form } from 'react-bootstrap';

const OrderList = () => {
  const {
    items: orders,
    loading,
    fetchAll,
    update
  } = useCrud(orderAPI);

  // Debug log to check orders
  console.log('Current orders:', orders);

  const [customers, setCustomers] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [modalLoading, setModalLoading] = useState(false);
  const [deliveryPersonnel, setDeliveryPersonnel] = useState([]);
  const [showDeliveryModal, setShowDeliveryModal] = useState(false);
  const [selectedDeliveryPerson, setSelectedDeliveryPerson] = useState('');
  const [currentOrderForDelivery, setCurrentOrderForDelivery] = useState(null);

  useEffect(() => {
    fetchOrders();
    fetchCustomers();
    fetchDeliveryPersonnel();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  
  // Custom function to directly fetch orders
  const fetchOrders = async () => {
    try {
      const response = await orderAPI.getAll();
      console.log('Direct API response for orders:', response);
      
      // Handle the orders response structure
      if (response.data && response.data.orders) {
        console.log('Setting orders from direct API call:', response.data.orders);
        // Update the orders state
        // We're using the useCrud hook's items state, but calling this directly
        fetchAll();
      }
    } catch (error) {
      console.error('Error fetching orders directly:', error);
    }
  };

  const fetchCustomers = async () => {
    try {
      const response = await customerAPI.getAll();
      setCustomers(response.data);
    } catch (error) {
      console.error('Failed to fetch customers:', error);
    }
  };
  
  const fetchDeliveryPersonnel = async () => {
    try {
      const response = await userAPI.getByRole('delivery');
      if (Array.isArray(response.data)) {
        setDeliveryPersonnel(response.data);
      } else if (response.data && response.data.users) {
        setDeliveryPersonnel(response.data.users);
      } else {
        setDeliveryPersonnel([]);
      }
    } catch (error) {
      console.error('Failed to fetch delivery personnel:', error);
    }
  };
  
  const createTestOrder = async () => {
    try {
      // Current timestamp for unique order number
      const timestamp = Date.now();
      
      const sampleOrder = {
        orderNumber: `TEST-${timestamp.toString().slice(-6)}`,
        customerName: "Test Customer",
        items: [
          { 
            name: "Test Product", 
            quantity: 1, 
            price: 19.99,
            productId: `prod-${timestamp}`
          }
        ],
        totalAmount: 19.99,
        total: 19.99,
        status: "pending",
        createdAt: new Date().toISOString(),
        shippingAddress: {
          street: "123 Test St",
          city: "Test City",
          state: "TS",
          zip: "12345"
        }
      };
      
      console.log("Creating test order:", sampleOrder);
      const result = await orderAPI.create(sampleOrder);
      console.log("Created test order:", result);
      
      // Refresh orders to show the new one
      fetchOrders();
    } catch (error) {
      console.error("Error creating sample order:", error);
    }
  };

  // Make sure orders is always an array and handle possible empty/null items
  let safeOrders = [];
  if (Array.isArray(orders)) {
    safeOrders = orders;
  } else if (orders && typeof orders === 'object') {
    // If it's an object but not an array, it might be a single order
    safeOrders = [orders];
  }
  
  // Add some dummy orders for testing if no orders exist
  if (safeOrders.length === 0) {
    console.log('No orders found, adding dummy orders for UI testing');
    safeOrders = [
      {
        _id: 'dummy1',
        customerName: 'John Doe',
        items: [{ name: 'Product 1', quantity: 2, price: 29.99 }],
        total: 59.98,
        totalAmount: 59.98,
        status: 'pending',
        createdAt: new Date().toISOString()
      },
      {
        _id: 'dummy2',
        customerName: 'Jane Smith',
        items: [{ name: 'Product 2', quantity: 1, price: 49.99 }],
        total: 49.99,
        totalAmount: 49.99,
        status: 'confirmed',
        createdAt: new Date().toISOString()
      }
    ];
  }
  
  console.log('Orders before filtering:', safeOrders);

  const filteredOrders = safeOrders.filter(order => {
    if (!order) return false;
    
    console.log('Filtering order:', order);
    
    // Extract order properties safely
    const orderId = order.orderNumber || order.id || order._id;
    const customerName = order.customerName || order.customer?.name || '';
    const status = order.status || 'unknown';
    
    // If search term is empty, include all orders
    const matchesSearch = 
      !searchTerm || 
      (orderId && orderId.toString().includes(searchTerm)) ||
      customerName.toLowerCase().includes(searchTerm.toLowerCase());
    
    // If status filter is empty, include all statuses
    const matchesStatus = !statusFilter || status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });
  
  // Debug log for filtered orders
  console.log('Filtered orders:', filteredOrders);

  const handleViewOrder = (order) => {
    setSelectedOrder(order);
    setShowModal(true);
  };
  
  const handleOrderUpdate = (updatedOrder) => {
    update(updatedOrder._id, updatedOrder);
  };

  const handleUpdateStatus = async (orderId, newStatus) => {
    setModalLoading(true);
    try {
      console.log('Updating order status:', orderId, newStatus);
      await orderAPI.updateStatus(orderId, newStatus);
      
      // Refresh orders
      await fetchOrders();
      
      if (selectedOrder && (selectedOrder.id === orderId || selectedOrder._id === orderId)) {
        setSelectedOrder({
          ...selectedOrder,
          status: newStatus
        });
      }
    } catch (error) {
      console.error('Failed to update order status:', error);
    } finally {
      setModalLoading(false);
    }
  };
  
  const handleShowAssignDelivery = (order) => {
    setCurrentOrderForDelivery(order);
    setSelectedDeliveryPerson('');
    setShowDeliveryModal(true);
  };
  
  const handleAssignDelivery = async () => {
    if (!selectedDeliveryPerson || !currentOrderForDelivery) return;
    
    setModalLoading(true);
    try {
      // Create a delivery record
      const deliveryData = {
        order: currentOrderForDelivery._id || currentOrderForDelivery.id,
        deliveryPerson: selectedDeliveryPerson,
        status: 'assigned',
        address: currentOrderForDelivery.shippingAddress || currentOrderForDelivery.address,
        customerName: currentOrderForDelivery.customerName || currentOrderForDelivery.customer?.name,
        contactPhone: currentOrderForDelivery.phone || currentOrderForDelivery.customer?.phone,
        items: currentOrderForDelivery.items
      };
      
      // Create the delivery
      await deliveryAPI.create(deliveryData);
      
      // Update the order status to reflect it's assigned for delivery
      await orderAPI.updateStatus(
        currentOrderForDelivery._id || currentOrderForDelivery.id, 
        'out_for_delivery'
      );
      
      // Refresh orders
      await fetchAll();
      
      // Close modal
      setShowDeliveryModal(false);
    } catch (error) {
      console.error('Failed to assign delivery person:', error);
    } finally {
      setModalLoading(false);
    }
  };

  const getStatusOptions = (currentStatus) => {
    const statusFlow = {
      [ORDER_STATUS.PENDING]: [ORDER_STATUS.CONFIRMED, ORDER_STATUS.CANCELLED],
      [ORDER_STATUS.CONFIRMED]: [ORDER_STATUS.PROCESSING, ORDER_STATUS.CANCELLED],
      [ORDER_STATUS.PROCESSING]: [ORDER_STATUS.READY, ORDER_STATUS.CANCELLED],
      [ORDER_STATUS.READY]: [ORDER_STATUS.OUT_FOR_DELIVERY],
      [ORDER_STATUS.OUT_FOR_DELIVERY]: [ORDER_STATUS.DELIVERED],
      [ORDER_STATUS.DELIVERED]: [],
      [ORDER_STATUS.CANCELLED]: []
    };

    return statusFlow[currentStatus] || [];
  };

  if (loading) {
    return <LoadingSpinner text="Loading orders..." />;
  }

  return (
    <div className="container-fluid py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Order Management</h2>
        <div className="d-flex gap-2">
          <Button 
            variant="outline-primary" 
            onClick={fetchOrders}
          >
            <i className="bi bi-arrow-clockwise me-2"></i>
            Refresh
          </Button>
          <Button 
            variant="outline-success" 
            onClick={createTestOrder}
          >
            <i className="bi bi-plus-circle me-2"></i>
            Add Test Order
          </Button>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="row mb-4">
        <div className="col-md-6">
          <div className="input-group">
            <span className="input-group-text">
              <i className="bi bi-search"></i>
            </span>
            <input
              type="text"
              className="form-control"
              placeholder="Search orders..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <select
            className="form-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All Status</option>
            {Object.values(ORDER_STATUS).map(status => (
              <option key={status} value={status}>
                {status.replace('_', ' ').toUpperCase()}
              </option>
            ))}
          </select>
        </div>
        <div className="col-md-2 text-end">
          <span className="text-muted">
            {filteredOrders.length} orders
          </span>
        </div>
      </div>

      {/* Order Stats */}
      <div className="row g-3 mb-4">
        {Object.values(ORDER_STATUS).map(status => {
          const count = safeOrders.filter(order => order.status === status).length;
          return (
            <div key={status} className="col-md-2">
              <div className="card text-center">
                <div className="card-body py-2">
                  <div className={`badge bg-${getStatusBadgeColor(status)} w-100 mb-1`}>
                    {status.replace('_', ' ').toUpperCase()}
                  </div>
                  <h4 className="mb-0">{count}</h4>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Order Table */}
      <div className="card">
        <div className="card-body">
          {filteredOrders.length === 0 ? (
            <div className="text-center py-4">
              <i className="bi bi-cart-x fs-1 text-muted d-block mb-2"></i>
              <p className="text-muted">No orders found</p>
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-hover">
                <thead>
                  <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Date</th>
                    <th>Delivery Person</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredOrders.map(order => (
                    <tr key={order._id || order.id}>
                      <td>
                        <strong>#{order.id || order._id?.toString().slice(-6)}</strong>
                      </td>
                      <td>{order.customerName || order.customer?.name || 'Unknown Customer'}</td>
                      <td>
                        <small>
                          {order.items?.length || 0} items
                        </small>
                      </td>
                      <td>
                        <strong>{formatCurrency(order.total || order.totalAmount || 0)}</strong>
                      </td>
                      <td>
                        <StatusBadge status={order.status} />
                      </td>
                      <td>{formatDate(order.createdAt)}</td>
                      <td>
                        {order.deliveryPerson ? 
                          order.deliveryPerson.name || `ID: ${order.deliveryPerson._id}` 
                          : 'Not assigned'}
                      </td>
                      <td>
                        <div className="btn-group btn-group-sm">
                          <button
                            className="btn btn-outline-primary"
                            onClick={() => handleViewOrder(order)}
                          >
                            View
                          </button>
                          
                          <button
                            className="btn btn-outline-info"
                            onClick={() => handleShowAssignDelivery(order)}
                            disabled={order.status === 'delivered' || order.status === 'cancelled'}
                          >
                            Assign Delivery
                          </button>
                          
                          {getStatusOptions(order.status).length > 0 && (
                            <div className="btn-group btn-group-sm">
                              <button
                                className="btn btn-outline-secondary dropdown-toggle"
                                data-bs-toggle="dropdown"
                              >
                                Update Status
                              </button>
                              <ul className="dropdown-menu">
                                {getStatusOptions(order.status).map(status => (
                                  <li key={status}>
                                    <button
                                      className="dropdown-item"
                                      onClick={() => handleUpdateStatus(order._id || order.id, status)}
                                    >
                                      {status.replace('_', ' ').toUpperCase()}
                                    </button>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Order Details Modal */}
      <OrderDetail
        order={selectedOrder}
        show={showModal}
        onClose={() => setShowModal(false)}
        onUpdate={handleOrderUpdate}
      />
      
      {/* Assign Delivery Person Modal */}
      <Modal show={showDeliveryModal} onHide={() => setShowDeliveryModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Delivery Person</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {currentOrderForDelivery && (
            <div>
              <div className="alert alert-info mb-3">
                <div><strong>Order ID:</strong> #{currentOrderForDelivery.id || currentOrderForDelivery._id}</div>
                <div><strong>Customer:</strong> {currentOrderForDelivery.customerName || currentOrderForDelivery.customer?.name}</div>
                <div><strong>Status:</strong> <StatusBadge status={currentOrderForDelivery.status} /></div>
              </div>
              
              <Form.Group className="mb-3">
                <Form.Label>Select Delivery Person</Form.Label>
                <Form.Select
                  value={selectedDeliveryPerson}
                  onChange={(e) => setSelectedDeliveryPerson(e.target.value)}
                >
                  <option value="">Select a delivery person</option>
                  {deliveryPersonnel.map(person => (
                    <option key={person._id} value={person._id}>
                      {person.name} ({person.email})
                    </option>
                  ))}
                </Form.Select>
                
                <div className="d-grid gap-2 mt-3">
                  <Button 
                    variant="primary"
                    disabled={!selectedDeliveryPerson}
                    onClick={handleAssignDelivery}
                  >
                    {modalLoading ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Assigning...
                      </>
                    ) : 'Assign Delivery Person'}
                  </Button>
                </div>
              </Form.Group>
            </div>
          )}
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default OrderList;
